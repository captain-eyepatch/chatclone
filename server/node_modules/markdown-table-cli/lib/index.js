// Generated by LiveScript 1.4.0
(function(){
  var JSONStream, through2Map, minimist, fs, path, table, argv, props, identity, capitalizeWords, formatTable, slice$ = [].slice;
  JSONStream = require('JSONStream');
  through2Map = require('through2-map');
  minimist = require('minimist');
  fs = require('fs');
  path = require('path');
  table = require('markdown-table');
  argv = minimist(process.argv.slice(2), {
    string: 'a',
    boolean: ['u', 'c'],
    alias: {
      h: 'help'
    }
  });
  if (argv.help) {
    return fs.createReadStream(path.join(__dirname, '../bin/usage.txt')).pipe(process.stdout);
  }
  props = curry$(function(ks, obj){
    var i$, len$, k, results$ = [];
    for (i$ = 0, len$ = ks.length; i$ < len$; ++i$) {
      k = ks[i$];
      results$.push(obj[k]);
    }
    return results$;
  });
  identity = function(it){
    return it;
  };
  capitalizeWords = function(it){
    return it.replace(/(^|[^a-zA-Z\u00C0-\u017F'])([a-zA-Z\u00C0-\u017F])/g, function(it){
      return it.toUpperCase();
    });
  };
  formatTable = function(objs, opts){
    var keys, head, ref$;
    keys = Object.keys(objs[0]);
    head = keys.map((function(){
      switch (false) {
      case !opts.c:
        return capitalizeWords;
      case !opts.u:
        return function(it){
          return it.toUpperCase();
        };
      default:
        return identity;
      }
    }()));
    return table([head].concat(objs.map(props(keys))), {
      align: (ref$ = opts.a) != null ? ref$.match(/[lrc]/g) : void 8
    });
  };
  process.stdin.pipe(JSONStream.parse()).pipe(through2Map.obj(partialize$.apply(this, [
    compose$(formatTable, (function(it){
      return it + '\n';
    })), [void 8, argv], [0]
  ]))).pipe(process.stdout);
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function partialize$(f, args, where){
    var context = this;
    return function(){
      var params = slice$.call(arguments), i,
          len = params.length, wlen = where.length,
          ta = args ? args.concat() : [], tw = where ? where.concat() : [];
      for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
      return len < wlen && len ?
        partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
    };
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
}).call(this);
